#handlers\category_handler.py
from bot_app import bot
from telebot import types
from models import SessionLocal
from models.category import Category
from models.user import User
from handlers.start_handler import get_main_menu


# Menu of category operations
def get_categories_menu():
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üìë –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"),
        types.KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"),
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"),
        types.KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    return markup


# Main categories menu
enhanced_menu = get_categories_menu()


@bot.message_handler(func=lambda m: m.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
def categories_menu(message):
    bot.send_message(
        message.chat.id,
        "–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:",
        reply_markup=get_categories_menu()
    )


# Show all categories\
@bot.message_handler(func=lambda m: m.text == "üìë –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
def show_categories(message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    categories = session.query(Category).filter(Category.user_id == user.id).all()
    session.close()
    if not categories:
        text = "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."
    else:
        lines = []
        for cat in categories:
            default_note = "–®–∞–±–ª–æ–Ω" if cat.is_default else "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞"
            cat_type = "–í–∏—Ç—Ä–∞—Ç–∏" if cat.type == "expense" else "–î–æ—Ö—ñ–¥"
            lines.append(f"‚Ä¢ {cat.name} [{cat_type}] ({default_note})")
        text = "–í–∞—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n" + "\n".join(lines)
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=get_categories_menu()
    )


# Add category
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
def add_category_start(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–í–∏—Ç—Ä–∞—Ç–∞"),
        types.KeyboardButton("–î–æ—Ö—ñ–¥"),
        types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    msg = bot.send_message(
        message.chat.id,
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∞–±–æ 'üîô –ù–∞–∑–∞–¥' –¥–ª—è –≤–∏—Ö–æ–¥—É:",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, add_category_type)


def add_category_type(message):
    choice = message.text.strip()
    if choice == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    if choice not in ("–í–∏—Ç—Ä–∞—Ç–∞", "–î–æ—Ö—ñ–¥"):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è.", reply_markup=get_categories_menu())
        return
    ctype = "expense" if choice == "–í–∏—Ç—Ä–∞—Ç–∞" else "income"
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ({choice}):", reply_markup=markup
    )
    bot.register_next_step_handler(msg, add_category_name, ctype)


def add_category_name(message, ctype):
    name = message.text.strip()
    if name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    category = Category(name=name, type=ctype, is_default=False, user_id=user.id)
    session.add(category)
    session.commit()
    session.close()
    bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{name}' –¥–æ–¥–∞–Ω–æ ({ctype}).", reply_markup=get_categories_menu())


# Edit category: select category
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
def edit_category_start(message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    categories = session.query(Category).filter(Category.user_id == user.id).all()
    session.close()
    if not categories:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.", reply_markup=get_categories_menu())
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for cat in categories:
        markup.add(types.KeyboardButton(cat.name))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, edit_category_choice)


# Edit category: choose field
def edit_category_choice(message):
    name_old = message.text.strip()
    if name_old == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    category = session.query(Category).filter(Category.user_id == user.id, Category.name == name_old).first()
    session.close()
    if not category:
        bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{name_old}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_categories_menu())
        return
    # Ask what to edit
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É"), types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø"),
               types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, f"–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ '{name_old}'?", reply_markup=markup)
    bot.register_next_step_handler(msg, edit_category_field, category.id)


# Edit category: apply field change
def edit_category_field(message, category_id):
    choice = message.text.strip()
    if choice == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    if choice == "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, edit_category_apply_name, category_id)
    elif choice == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton("–í–∏—Ç—Ä–∞—Ç–∞"), types.KeyboardButton("–î–æ—Ö—ñ–¥"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        msg = bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=markup)
        bot.register_next_step_handler(msg, edit_category_apply_type, category_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è.", reply_markup=get_categories_menu())


# Edit category: apply new name
def edit_category_apply_name(message, category_id):
    new_name = message.text.strip()
    if new_name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    session = SessionLocal()
    category = session.get(Category, category_id)
    category.name = new_name
    category.is_default = 0
    session.commit()
    session.close()
    bot.send_message(message.chat.id, f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ '{new_name}'.", reply_markup=get_categories_menu())


# Edit category: apply new type
def edit_category_apply_type(message, category_id):
    choice = message.text.strip()
    if choice == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_categories_menu())
        return
    if choice not in ("–í–∏—Ç—Ä–∞—Ç–∞", "–î–æ—Ö—ñ–¥"):
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø.", reply_markup=get_categories_menu())
        return
    ctype = "expense" if choice == "–í–∏—Ç—Ä–∞—Ç–∞" else "income"
    session = SessionLocal()
    category = session.get(Category, category_id)
    category.type = ctype
    category.is_default = 0
    session.commit()
    session.close()
    bot.send_message(message.chat.id, f"–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{choice}'.", reply_markup=get_categories_menu())


# Delete category
@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
def delete_category_start(message):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    categories = session.query(Category).filter(Category.user_id == user.id).all()
    session.close()
    if not categories:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
            reply_markup=get_categories_menu()
        )
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for cat in categories:
        markup.add(types.KeyboardButton(cat.name))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(
        message.chat.id,
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup
    )
    bot.register_next_step_handler(msg, delete_category_confirm)


def delete_category_confirm(message):
    name = message.text.strip()
    if name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(
            message.chat.id,
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=get_categories_menu()
        )
        return
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    category = session.query(Category).filter(
        Category.user_id == user.id,
        Category.name == name
    ).first()
    session.close()
    if not category:
        bot.send_message(
            message.chat.id,
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_categories_menu()
        )
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –¢–∞–∫"), types.KeyboardButton("‚ùå –ù—ñ"))
    msg = bot.send_message(
        message.chat.id,
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{name}'?", reply_markup=markup
    )
    bot.register_next_step_handler(msg, delete_category_apply, category.id)


def delete_category_apply(message, category_id):
    choice = message.text.strip()
    if choice == "‚úÖ –¢–∞–∫":
        session = SessionLocal()
        category = session.get(Category, category_id)
        session.delete(category)
        session.commit()
        session.close()
        bot.send_message(
            message.chat.id,
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=get_categories_menu()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.", reply_markup=get_categories_menu()
        )


@bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
def return_to_menu(message):
    mes = message.text.strip()
    if mes == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(
            message.chat.id,
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return
    else:
        pass
