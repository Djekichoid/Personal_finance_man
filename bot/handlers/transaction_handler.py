# handlers\transaction_handler.py
from bot.bot_app import bot
from telebot import types
from bot.models import SessionLocal
from bot.models.transaction import Transaction
from bot.models.category import Category
from bot.models.user import User
from bot.handlers.start_handler import get_main_menu
import datetime


# Utility to fetch categories by type
def fetch_categories(telegram_id, ctype):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        session.close()
        return []
    cats = session.query(Category).filter(Category.user_id == user.id, Category.type == ctype).all()
    session.close()
    return cats


@bot.message_handler(func=lambda m: m.text == "‚ûï –í–∏—Ç—Ä–∞—Ç–∞")
def expense_start(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=markup)
    bot.register_next_step_handler(msg, expense_amount)


@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ—Ö—ñ–¥")
def income_start(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–æ—Ö–æ–¥—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, income_amount)


def expense_amount(message):
    text = message.text.strip()
    if text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    try:
        amount = float(text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_menu())
        return
    telegram_id = message.from_user.id
    categories = fetch_categories(telegram_id, 'expense')
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for cat in categories:
        markup.add(types.KeyboardButton(cat.name))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, expense_category, amount)


def expense_category(message, amount):
    name = message.text.strip()
    if name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    category = session.query(Category).filter(Category.user_id == user.id, Category.name == name,
                                              Category.type == 'expense').first()
    session.close()
    if not category:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
        return
    # Prompt for optional note with skip and back options
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(
        message.chat.id,
        "(–û–ø—Ü—ñ–π–Ω–æ) –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —á–∏ 'üîô –ù–∞–∑–∞–¥':",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, expense_note, amount, category.id if category else None, name)


def expense_note(message, amount, category_id, category_name):
    note = message.text.strip()
    if note == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    if note == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        note = ""
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    transaction = Transaction(
        amount=amount,
        date=datetime.datetime.utcnow(),
        type='expense',
        note=note,
        user_id=user.id,
        category_id=category_id
    )
    session.add(transaction)
    session.commit()
    session.close()
    bot.send_message(message.chat.id, f"–í–∏—Ç—Ä–∞—Ç—É {amount} –¥–æ–¥–∞–Ω–æ –¥–æ '{category_name}'.", reply_markup=get_main_menu())


def income_amount(message):
    text = message.text.strip()
    if text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    try:
        amount = float(text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_menu())
        return
    telegram_id = message.from_user.id
    categories = fetch_categories(telegram_id, 'income')
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for cat in categories:
        markup.add(types.KeyboardButton(cat.name))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, income_category, amount)


def income_category(message, amount):
    name = message.text.strip()
    if name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    category = session.query(Category).filter(Category.user_id == user.id, Category.name == name,
                                              Category.type == 'income').first()
    session.close()
    if not category:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"), types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(
        message.chat.id,
        "(–û–ø—Ü—ñ–π–Ω–æ) –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ—Ö–æ–¥—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏' —á–∏ 'üîô –ù–∞–∑–∞–¥':",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, income_note, amount, category.id if category else None, name)


def income_note(message, amount, category_id, category_name):
    note = message.text.strip()
    if note == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        return
    if note == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        note = ""
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    transaction = Transaction(
        amount=amount,
        date=datetime.datetime.utcnow(),
        type='income',
        note=note,
        user_id=user.id,
        category_id=category_id
    )
    session.add(transaction)
    session.commit()
    session.close()
    bot.send_message(message.chat.id, f"–î–æ—Ö—ñ–¥ {amount} –¥–æ–¥–∞–Ω–æ –¥–æ '{category_name}'.", reply_markup=get_main_menu())
