# handlers/monthly_report_handler.py
import matplotlib

matplotlib.use('Agg')
import matplotlib.pyplot as plt
from io import BytesIO
import datetime
import requests

from bot_app import bot
from telebot import types
from models import SessionLocal
from models.transaction import Transaction
from models.category import Category
from models.monthly_metric import MonthlyMetric
from models.user import User
from handlers.start_handler import get_main_menu


# --------------------------------------------
# 1. –•–µ–Ω–¥–ª–µ—Ä-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–ª–∏–∫—É –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
# --------------------------------------------
@bot.message_handler(func=lambda m: m.text == "üìÖ –©–æ–º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç")
def monthly_report(message):
    """
    –§–æ—Ä–º—É—î –∑–≤—ñ—Ç –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å.
    """
    chat_id = message.chat.id

    # 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
    today = datetime.date.today()
    first_of_current_month = today.replace(day=1)
    end_prev_month = first_of_current_month - datetime.timedelta(days=1)
    start_prev_month = end_prev_month.replace(day=1)

    prev_date = start_prev_month.replace(day=1) - datetime.timedelta(days=1)
    prev_year_month_str = prev_date.strftime("%Y-%m")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –ë–î –º–µ—Ç—Ä–∏–∫–∞ –∑–∞ —Ç–æ–π –º—ñ—Å—è—Ü—å
    year_month_str = start_prev_month.strftime("%Y-%m")
    session = SessionLocal()
    prev_metric = session.query(MonthlyMetric).filter(
        MonthlyMetric.user_id == get_or_create_user_id(message.from_user.id, session),
        MonthlyMetric.year_month == prev_year_month_str
    ).first()
    session.close()

    # 2. –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    data = collect_monthly_data(message.from_user.id, start_prev_month, end_prev_month)

    # 3. –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º
    comparison_text = build_comparison_text(prev_metric, data, start_prev_month)

    # 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
    pie_buf = build_pie_charts(data["cat_expenses"], data["cat_incomes"], start_prev_month, end_prev_month)
    line_buf = build_daily_line_chart(data["daily_expenses"], start_prev_month, end_prev_month)
    summary_buf = build_summary_bar_chart(data["total_income"], data["total_expense"], start_prev_month, end_prev_month)
    currency_buf = build_currency_chart(start_prev_month, end_prev_month)

    # 5. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    bot.send_photo(chat_id, pie_buf);
    pie_buf.close()
    bot.send_photo(chat_id, line_buf);
    line_buf.close()
    bot.send_photo(chat_id, summary_buf);
    summary_buf.close()
    bot.send_photo(chat_id, currency_buf);
    currency_buf.close()

    # 6. –¢–µ–∫—Å—Ç–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    text_report = format_text_report(data, comparison_text, start_prev_month, end_prev_month)
    bot.send_message(chat_id, text_report, reply_markup=get_main_menu())

    # 7. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    save_monthly_metric(message.from_user.id, year_month_str, data)


# --------------------------------------------
# 2. –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: —Å—Ç–≤–æ—Ä—é—î/–ø–æ–≤–µ—Ä—Ç–∞—î user_id
# --------------------------------------------
def get_or_create_user_id(telegram_id: int, session):
    user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if user:
        return user.id
    user = User(telegram_id=telegram_id, username="", timezone=None)
    session.add(user)
    session.commit()
    return user.id


# --------------------------------------------
# 3. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è—Ö + –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –∑ –ù–ë–£
# --------------------------------------------
def collect_monthly_data(telegram_id: int, start_dt: datetime.date, end_dt: datetime.date) -> dict:
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        session.close()
        return {
            "total_income": 0.0,
            "total_expense": 0.0,
            "daily_expenses": {},
            "cat_expenses": {},
            "cat_incomes": {},
            "avg_usd": 0.0,
            "avg_eur": 0.0
        }

    # -------- 3.1. –ó–∞–≥–∞–ª—å–Ω—ñ —Å—É–º–∏ –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç --------
    txs = session.query(Transaction).filter(
        Transaction.user_id == user.id,
        Transaction.date >= datetime.datetime.combine(start_dt, datetime.time.min),
        Transaction.date <= datetime.datetime.combine(end_dt, datetime.time.max)
    ).all()

    total_income = sum(t.amount for t in txs if t.type == "income")
    total_expense = sum(t.amount for t in txs if t.type == "expense")

    # -------- 3.2. –î–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ --------
    daily_expenses = {}
    cur_date = start_dt
    while cur_date <= end_dt:
        daily_expenses[cur_date] = 0.0
        cur_date += datetime.timedelta(days=1)

    for t in txs:
        if t.type == "expense":
            d = t.date.date()
            if d in daily_expenses:
                daily_expenses[d] += t.amount

    # -------- 3.3. –í–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ --------
    cat_expenses = {}
    cat_incomes = {}
    for t in txs:
        cat = session.query(Category).get(t.category_id)
        if not cat:
            continue
        if t.type == "expense":
            cat_expenses[cat.name] = cat_expenses.get(cat.name, 0.0) + t.amount
        else:
            cat_incomes[cat.name] = cat_incomes.get(cat.name, 0.0) + t.amount

    session.close()

    # -------- 3.4. –°–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä—Å USD‚ÜíUAH —Ç–∞ EUR‚ÜíUAH —á–µ—Ä–µ–∑ API –ù–ë–£ --------
    def fetch_avg_rate_nbu(c_char_code: str, start: datetime.date, end: datetime.date) -> float:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä—Å c_char_code‚ÜíUAH –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç,
        –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —â–æ–¥–µ–Ω–Ω–∏–π JSON-–µ–Ω–¥–ø–æ—ñ–Ω—Ç –ù–ë–£:
        https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date=YYYYMMDD&json
        """
        total = 0.0
        count = 0

        cur = start
        while cur <= end:
            # —Ñ–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYYMMDD
            date_str = cur.strftime("%Y%m%d")
            url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={date_str}&json"
            try:
                resp = requests.get(url, timeout=5)
                rates_list = resp.json()  # —Å–ø–∏—Å–æ–∫ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∑ –∫–ª—é—á–∞–º–∏ "r030","txt","rate","cc","exchangedate"
                # —à—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —ñ–∑ "cc" == c_char_code
                for item in rates_list:
                    if item.get("cc") == c_char_code:
                        total += float(item.get("rate", 0))
                        count += 1
                        break
            except:
                # –Ø–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                pass

            cur += datetime.timedelta(days=1)

        return (total / count) if count > 0 else 0.0

    avg_usd = fetch_avg_rate_nbu("USD", start_dt, end_dt)
    avg_eur = fetch_avg_rate_nbu("EUR", start_dt, end_dt)

    return {
        "total_income": total_income,
        "total_expense": total_expense,
        "daily_expenses": daily_expenses,
        "cat_expenses": cat_expenses,
        "cat_incomes": cat_incomes,
        "avg_usd": avg_usd,
        "avg_eur": avg_eur
    }


# --------------------------------------------
# 4. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –º—ñ—Å—è—Ü–µ–º ‚Üí —Ç–µ–∫—Å—Ç
# --------------------------------------------
def build_comparison_text(prev_metric: MonthlyMetric, data: dict, start_dt: datetime.date) -> str:
    if not prev_metric:
        return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.\n"

    txt = ""
    # 4.1. –î–æ—Ö–æ–¥–∏
    diff_inc = data["total_income"] - prev_metric.total_income
    pct_inc = (diff_inc / prev_metric.total_income * 100) if prev_metric.total_income else 0.0
    arrow_inc = "üî∫" if diff_inc >= 0 else "üîª"
    txt += f"–î–æ—Ö–æ–¥–∏: {data['total_income']:.2f} ({arrow_inc} {abs(pct_inc):.1f}% )\n"

    # 4.2. –í–∏—Ç—Ä–∞—Ç–∏
    diff_exp = data["total_expense"] - prev_metric.total_expense
    pct_exp = (diff_exp / prev_metric.total_expense * 100) if prev_metric.total_expense else 0.0
    arrow_exp = "üî∫" if diff_exp >= 0 else "üîª"
    txt += f"–í–∏—Ç—Ä–∞—Ç–∏: {data['total_expense']:.2f} ({arrow_exp} {abs(pct_exp):.1f}% )\n"

    # 4.3. –°–µ—Ä–µ–¥–Ω—è –¥–æ–±–æ–≤–∞ –≤–∏—Ç—Ä–∞—Ç–∞
    days_in_month = len(data["daily_expenses"])
    avg_daily = data["total_expense"] / days_in_month if days_in_month else 0.0
    diff_avg = avg_daily - prev_metric.avg_daily_expense
    pct_avg = (diff_avg / prev_metric.avg_daily_expense * 100) if prev_metric.avg_daily_expense else 0.0
    arrow_avg = "üî∫" if diff_avg >= 0 else "üîª"
    txt += f"–°–µ—Ä–µ–¥–Ω—è –¥–æ–±–æ–≤–∞ –≤–∏—Ç—Ä–∞—Ç–∞: {avg_daily:.2f} ({arrow_avg} {abs(pct_avg):.1f}% )\n"

    # 4.4. –¢–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä—ñ—è
    if prev_metric.top_category == data["cat_expenses"] and prev_metric.top_category:
        txt += f"–ù–∞–π–±—ñ–ª—å—à–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç –∑–∞–ª–∏—à–∏–ª–∞—Å—è: {prev_metric.top_category} ({prev_metric.top_category_pct:.1f}%)\n"
    else:
        if data["cat_expenses"]:
            top_cat_name, top_cat_amt = max(data["cat_expenses"].items(), key=lambda x: x[1])
            share = top_cat_amt / data["total_expense"] * 100 if data["total_expense"] else 0.0
            txt += f"–¢–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç –∑–º—ñ–Ω–∏–ª–∞—Å—è: {top_cat_name} ‚Äî {top_cat_amt:.2f} –≥—Ä–Ω ({share:.1f}%)({prev_metric.top_category} ({prev_metric.top_category_pct:.1f}%))\n"

    return txt + "\n"


# --------------------------------------------
# 5. –ü–æ–±—É–¥–æ–≤–∞ –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º
# --------------------------------------------
def build_pie_charts(cat_expenses: dict, cat_incomes: dict, start_dt: datetime.date, end_dt: datetime.date):
    labels_exp = list(cat_expenses.keys()) or ["–ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç"]
    sizes_exp = list(cat_expenses.values()) or [1.0]
    labels_inc = list(cat_incomes.keys()) or ["–ù–µ–º–∞—î –¥–æ—Ö–æ–¥—ñ–≤"]
    sizes_inc = list(cat_incomes.values()) or [1.0]

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))
    ax1.pie(sizes_exp, labels=labels_exp, autopct="%1.1f%%", startangle=90)
    ax1.set_title("–í–∏—Ç—Ä–∞—Ç–∏")
    ax2.pie(sizes_inc, labels=labels_inc, autopct="%1.1f%%", startangle=90)
    ax2.set_title("–î–æ—Ö–æ–¥–∏")
    fig.suptitle(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {start_dt}‚Äì{end_dt}")

    buf = BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf


# --------------------------------------------
# 6. –ü–æ–±—É–¥–æ–≤–∞ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É –¥–µ–Ω–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç
# --------------------------------------------
def build_daily_line_chart(daily_expenses: dict, start_dt: datetime.date, end_dt: datetime.date):
    dates = sorted(daily_expenses.keys())
    vals = [daily_expenses[d] for d in dates]
    max_val = max(vals) if vals else 0.0
    max_day = dates[vals.index(max_val)] if vals else None

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(dates, vals, color="red", label="–í–∏—Ç—Ä–∞—Ç–∏")
    if max_day:
        ax.scatter([max_day], [max_val], color="black")
        ax.text(max_day, max_val, f"  –ú–∞–∫—Å: {max_val:.2f}", fontsize=8)

    ax.set_title(f"–î–æ–±–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {start_dt}‚Äì{end_dt}")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω")
    fig.autofmt_xdate()

    buf = BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf


# --------------------------------------------
# 7. –ü–æ–±—É–¥–æ–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –∑–≤–µ–¥–µ–Ω–∏—Ö —Å—É–º
# --------------------------------------------
def build_summary_bar_chart(total_income: float, total_expense: float, start_dt: datetime.date, end_dt: datetime.date):
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.bar(["–î–æ—Ö–æ–¥–∏", "–í–∏—Ç—Ä–∞—Ç–∏"], [total_income, total_expense], color=["green", "red"])
    ax.set_title(f"–ó–≤–µ–¥–µ–Ω–∏–π –∑–≤—ñ—Ç: {start_dt}‚Äì{end_dt}")
    ax.set_ylabel("–°—É–º–∞, –≥—Ä–Ω")

    buf = BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf


# --------------------------------------------
# 8. –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç (–ù–ë–£ + CoinGecko)
# --------------------------------------------
def build_currency_chart(start_dt: datetime.date, end_dt: datetime.date):
    """
    1) –ó–±–∏—Ä–∞—î–º–æ USD‚ÜíUAH —Ç–∞ EUR‚ÜíUAH —á–µ—Ä–µ–∑ API –ù–ë–£;
    2) BTC‚ÜíUSD —ñ ETH‚ÜíUSD —á–µ—Ä–µ–∑ CoinGecko;
    3) –ú–∞–ª—é—î–º–æ –¥–≤–∞ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∏: —Ñ—ñ–∞—Ç —Ç–∞ –∫—Ä–∏–ø—Ç–æ.
    """

    # --- 8.1. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫—É—Ä—Å—É USD/EUR‚ÜíUAH –∑ –ù–ë–£ ---
    def fetch_timeseries_nbu(c_char_code: str, start: datetime.date, end: datetime.date) -> list:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (date_obj, rate) –¥–ª—è c_char_code (\"USD\" –∞–±–æ \"EUR\") –∑–∞ –≤–µ—Å—å –º—ñ—Å—è—Ü—å
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NBU API: https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date=YYYYMMDD&json
        """
        result = []
        cur = start
        while cur <= end:
            date_str = cur.strftime("%Y%m%d")
            url = f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={date_str}&json"
            try:
                resp = requests.get(url, timeout=5)
                rates_list = resp.json()  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
                for item in rates_list:
                    if item.get("cc") == c_char_code:
                        d_obj = cur
                        rate = float(item.get("rate", 0.0))
                        result.append((d_obj, rate))
                        break
            except:
                pass
            cur += datetime.timedelta(days=1)
        return result

    # --- 8.2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è BTC/ETH‚ÜíUSD —á–µ—Ä–µ–∑ CoinGecko ---
    def fetch_timeseries_crypto(symbol_id: str, vs_currency: str, start: datetime.date, end: datetime.date) -> list:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (date_obj, price) –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ symbol_id –∑–∞ –ø–µ—Ä—ñ–æ–¥.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CoinGecko: –æ—Å—Ç–∞–Ω–Ω—ñ N –¥–Ω—ñ–≤, –ø–æ—Ç—ñ–º —Ñ–∏–ª—Ç—Ä—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö.
        """
        url = f"https://api.coingecko.com/api/v3/coins/{symbol_id}/market_chart"
        params = {
            "vs_currency": vs_currency,
            "days": (end - start).days + 1
        }
        try:
            resp = requests.get(url, params=params, timeout=10)
            data = resp.json().get("prices", [])  # [[timestamp_ms, price], ‚Ä¶]
            result = []
            for timestamp_ms, price in data:
                d_obj = datetime.datetime.utcfromtimestamp(timestamp_ms / 1000.0).date()
                if start <= d_obj <= end:
                    result.append((d_obj, price))
            return sorted(result)
        except:
            return []

    # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ
    usd_series = fetch_timeseries_nbu("USD", start_dt, end_dt)
    eur_series = fetch_timeseries_nbu("EUR", start_dt, end_dt)
    btc_series = fetch_timeseries_crypto("bitcoin", "usd", start=start_dt, end=end_dt)
    eth_series = fetch_timeseries_crypto("ethereum", "usd", start=start_dt, end=end_dt)

    # –ú–∞–ª—é—î–º–æ –¥–≤—ñ –ø–∞–Ω–µ–ª—ñ
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6), sharex=False)

    # ----- 8.3. –ü–µ—Ä—à–∏–π –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫: USD‚ÜíUAH —Ç–∞ EUR‚ÜíUAH -----
    if usd_series:
        dates_usd, vals_usd = zip(*usd_series)
        ax1.plot(dates_usd, vals_usd, label="USD/UAH", color="blue")
    if eur_series:
        dates_eur, vals_eur = zip(*eur_series)
        ax1.plot(dates_eur, vals_eur, label="EUR/UAH", color="orange")

    ax1.set_title("–°–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä—Å —Ñ—ñ–∞—Ç: USD —Ç–∞ EUR ‚Üí UAH")
    ax1.set_ylabel("–ö—É—Ä—Å (UAH)")
    if usd_series or eur_series:
        ax1.legend()
    ax1.grid(True)

    # ----- 8.4. –î—Ä—É–≥–∏–π –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫: BTC‚ÜíUSD —Ç–∞ ETH‚ÜíUSD -----
    if btc_series:
        dates_btc, vals_btc = zip(*btc_series)
        ax2.plot(dates_btc, vals_btc, label="BTC/USD", color="black")

    if eth_series:
        dates_eth, vals_eth = zip(*eth_series)
        ax2_sec = ax2.twinx()
        ax2_sec.plot(dates_eth, vals_eth, label="ETH/USD", color="gray", linestyle="--")
        ax2_sec.set_ylabel("ETH/USD", color="gray")
        ax2_sec.tick_params(axis="y", labelcolor="gray")

    ax2.set_title("–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ: BTC —Ç–∞ ETH ‚Üí USD")
    ax2.set_xlabel("–î–∞—Ç–∞")
    ax2.set_ylabel("BTC/USD", color="black")
    ax2.tick_params(axis="y", labelcolor="black")
    # –î–æ–¥–∞—î–º–æ –ª–µ–≥–µ–Ω–¥—É –ª–∏—à–µ —è–∫—â–æ –¥–∞–Ω—ñ —î
    if btc_series:
        ax2.legend(loc="upper left")
    ax2.grid(True)

    fig.autofmt_xdate()
    fig.tight_layout()

    buf = BytesIO()
    fig.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)
    return buf


# --------------------------------------------
# 9. –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫
# --------------------------------------------
def format_text_report(data: dict, comparison_text: str, start_dt: datetime.date, end_dt: datetime.date) -> str:
    total_income = data["total_income"]
    total_expense = data["total_expense"]
    balance = total_income - total_expense
    days_count = len(data["daily_expenses"])
    avg_daily = (total_expense / days_count) if days_count else 0.0
    save_pct = (balance / total_income * 100) if total_income else 0.0

    txt = f"üìÖ –ó–≤—ñ—Ç –∑–∞ {start_dt.strftime('%B %Y')}\n\n"
    txt += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –¥–æ—Ö–æ–¥–∏: {total_income:.2f} –≥—Ä–Ω\n"
    txt += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {total_expense:.2f} –≥—Ä–Ω\n"
    txt += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å (–∑–∞–æ—â–∞–¥–∂–µ–Ω–æ): {balance:.2f} –≥—Ä–Ω ({save_pct:.1f}% –¥–æ—Ö–æ–¥—ñ–≤)\n\n"
    txt += "üîÑ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º:\n" + comparison_text + "\n"

    # –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
    if data["cat_expenses"]:
        sorted_exp = sorted(data["cat_expenses"].items(), key=lambda x: x[1], reverse=True)
        txt += "üî• –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:\n"
        for i, (cat, amt) in enumerate(sorted_exp[:3], start=1):
            pct = (amt / total_expense * 100) if total_expense else 0.0
            txt += f"   {i}. {cat} ‚Äî {amt:.2f} –≥—Ä–Ω ({pct:.1f}%)\n"
    else:
        txt += "üî• –í–∏—Ç—Ä–∞—Ç –Ω–µ –±—É–ª–æ.\n"

    # –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤
    if data["cat_incomes"]:
        sorted_inc = sorted(data["cat_incomes"].items(), key=lambda x: x[1], reverse=True)
        txt += "üí∞ –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:\n"
        for i, (cat, amt) in enumerate(sorted_inc[:3], start=1):
            pct = (amt / total_income * 100) if total_income else 0.0
            txt += f"   {i}. {cat} ‚Äî {amt:.2f} –≥—Ä–Ω ({pct:.1f}%)\n"
    else:
        txt += "üí∞ –î–æ—Ö–æ–¥—ñ–≤ –Ω–µ –±—É–ª–æ.\n"

    txt += f"\n‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –¥–æ–±–æ–≤–∞ –≤–∏—Ç—Ä–∞—Ç–∞: {avg_daily:.2f} –≥—Ä–Ω\n"
    txt += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä—Å USD‚ÜíUAH: {data['avg_usd']:.2f} –≥—Ä–Ω\n"
    txt += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä—Å EUR‚ÜíUAH: {data['avg_eur']:.2f} –≥—Ä–Ω\n"

    return txt


# --------------------------------------------
# 10. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é monthly_metrics
# --------------------------------------------
def save_monthly_metric(telegram_id: int, year_month: str, data: dict):
    session = SessionLocal()
    user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        session.close()
        return

    metric = session.query(MonthlyMetric).filter(
        MonthlyMetric.user_id == user.id,
        MonthlyMetric.year_month == year_month
    ).first()

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–ø-–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç
    top_cat = None
    top_pct = 0.0
    if data["cat_expenses"] and data["total_expense"] > 0:
        top_cat_name, top_cat_amt = max(data["cat_expenses"].items(), key=lambda x: x[1])
        top_cat = top_cat_name
        top_pct = (top_cat_amt / data["total_expense"]) * 100

    days_count = len(data["daily_expenses"])
    avg_daily = data["total_expense"] / days_count if days_count else 0.0

    if not metric:
        metric = MonthlyMetric(
            user_id=user.id,
            year_month=year_month,
            total_income=data["total_income"],
            total_expense=data["total_expense"],
            avg_daily_expense=avg_daily,
            top_category=top_cat,
            top_category_pct=top_pct,
            avg_usd=data["avg_usd"],
            avg_eur=data["avg_eur"]
        )
        session.add(metric)
    else:
        metric.total_income = data["total_income"]
        metric.total_expense = data["total_expense"]
        metric.avg_daily_expense = avg_daily
        metric.top_category = top_cat
        metric.top_category_pct = top_pct
        metric.avg_usd = data["avg_usd"]
        metric.avg_eur = data["avg_eur"]

    session.commit()
    session.close()
