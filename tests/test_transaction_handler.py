import pytest
from unittest.mock import MagicMock
from bot.handlers.transaction_handler import expense_amount, income_amount
from bot.handlers.start_handler import get_main_menu


class DummyMessage:
    def __init__(self, text, user_id=1, chat_id=123):
        self.text = text
        self.chat = type("C", (object,), {"id": chat_id})()
        self.from_user = type("U", (object,), {"id": user_id})()


# –¶—è —Ñ—ñ–∫—Å—Ç—É—Ä–∞ –º–æ–∫–∞—Ç–∏–º–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è expense-—Ç–µ—Å—Ç—ñ–≤
@pytest.fixture(autouse=True)
def patch_bot(monkeypatch):
    fake_send = MagicMock()
    fake_register = MagicMock()
    # –ü—ñ–¥–º—ñ–Ω—è—î–º–æ send_message —ñ register_next_step_handler —Å–∞–º–µ —Ç–∞–º, –¥–µ —ó—Ö –≤–∏–∫–ª–∏–∫–∞—î expense_amount
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.bot.send_message',
        fake_send
    )
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.bot.register_next_step_handler',
        fake_register
    )
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.get_main_menu',
        lambda: "MAIN_MENU"
    )
    return fake_send, fake_register


def test_expense_amount_back(patch_bot):
    fake_send, fake_register = patch_bot
    msg = DummyMessage("üîô –ù–∞–∑–∞–¥")
    expense_amount(msg)

    fake_send.assert_called_once_with(
        msg.chat.id,
        "–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup="MAIN_MENU"
    )
    fake_register.assert_not_called()


def test_expense_amount_invalid(patch_bot):
    fake_send, fake_register = patch_bot
    msg = DummyMessage("abc")
    expense_amount(msg)

    fake_send.assert_called_once_with(
        msg.chat.id,
        "–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        reply_markup="MAIN_MENU"
    )
    fake_register.assert_not_called()


def test_expense_amount_valid_triggers_next_step(monkeypatch, patch_bot):
    fake_send, fake_register = patch_bot

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ telegram_id
    class Cat:
        def __init__(self, name): self.name = name

    monkeypatch.setattr(
        'bot.handlers.transaction_handler.fetch_categories',
        lambda telegram_id, ctype: [Cat("Food"), Cat("Taxi")]
    )

    msg = DummyMessage("200.5")
    expense_amount(msg)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫ send_message –º—ñ—Å—Ç–∏—Ç—å –Ω–∞—à chat.id —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    first_call = fake_send.call_args_list[0]
    assert first_call[0][0] == msg.chat.id
    assert first_call[0][1] == "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"

    # –Ü –º–∞—î –±—É—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ –æ–¥–∏–Ω –≤–∏–∫–ª–∏–∫ register_next_step_handler
    assert fake_register.call_count == 1


# –¶—é —Ñ—ñ–∫—Å—Ç—É—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è income-—Ç–µ—Å—Ç—ñ–≤
@pytest.fixture()
def patch_bot_income(monkeypatch):
    fake_send = MagicMock()
    fake_register = MagicMock()
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.bot.send_message',
        fake_send
    )
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.bot.register_next_step_handler',
        fake_register
    )
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.fetch_categories',
        lambda telegram_id, ctype: []
    )
    monkeypatch.setattr(
        'bot.handlers.transaction_handler.get_main_menu',
        lambda: "MAIN_MENU"
    )
    return fake_send, fake_register


def test_income_amount_back(patch_bot_income):
    fake_send, fake_register = patch_bot_income
    msg = DummyMessage("üîô –ù–∞–∑–∞–¥")
    income_amount(msg)

    fake_send.assert_called_once_with(
        msg.chat.id,
        "–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup="MAIN_MENU"
    )
    fake_register.assert_not_called()


def test_income_amount_invalid(patch_bot_income):
    fake_send, fake_register = patch_bot_income
    msg = DummyMessage("notanumber")
    income_amount(msg)

    fake_send.assert_called_once_with(
        msg.chat.id,
        "–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        reply_markup="MAIN_MENU"
    )
    fake_register.assert_not_called()
